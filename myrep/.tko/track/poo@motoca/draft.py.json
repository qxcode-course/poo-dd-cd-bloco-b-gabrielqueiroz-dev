{
    "patches": [
        {
            "label": "2025-10-28_15-49-21",
            "content": "class Person:\n  def __init__(self, name, age):\n    self.__name = name\n    self.__age = age\n\n  def getName(self):\n    return self.__name\n\n  def getAge(self):\n    return self.__age\n\n  def setName(self, name):\n    self.__name = name\n\n  def setAge(self, age):\n    self.__age = age\n\n  def __str__(self):\n    return f\"{self.getName()}:{self.getAge()}\"\n  \nclass Motorcycle:\n  def __init__(self, power: int = 1):\n    self.__power: int = power\n    self.__time: int = 0\n    self.__person: Person | None = None\n\n  def getPower(self) -> int:\n    return self.__power\n\n  def getTime(self) -> int:\n    return self.__time\n\n  def getPerson(self) -> Person | None:\n    return self.__person\n\n  def setPower(self, power: int):\n    self.__power = power\n\n  def setTime(self, time: int):\n    self.__time = time\n\n  def insertPerson(self, person: Person) -> bool:\n    if self.getPerson() is not None:\n      print(\"fail: busy motorcycle\")\n      return False\n\n    self.__person = person\n    return True\n    \n  def remove(self) -> Person | None:\n    if self.getPerson() is None:\n      print(\"fail: empty motorcycle\")\n      return None\n\n    person = self.getPerson()\n    self.__person = None\n    return person\n  \n  def buyTime(self, time: int):\n    if time <= 0:\n      print(\"fail: invalid time\")\n      return\n\n    self.setTime(self.getTime() + time)\n\n  def drive(self, time: int):\n    if self.getTime() <= 0:\n      print(\"fail: buy time first\")\n      return\n    \n    if self.getPerson() is None:\n      print(\"fail: empty motorcycle\")\n      return\n\n    if self.getPerson().getAge() > 10:\n      print(\"fail: too old to drive\")\n      return\n    \n    if time > self.getTime():\n      print(f\"fail: time finished after {self.getTime()} minutes\")\n      self.setTime(0)\n      return\n\n    self.setTime(self.getTime() - time)\n\n    if self.getTime() < 0:\n      self.setTime(0)\n      print(f\"fail: time finished after {time} minutes\")\n\n  def honk(self):\n    print(\"P\" + \"e\" * self.getPower() + \"m\")\n\n  def __str__(self):\n    person_str = self.getPerson() if self.getPerson() is not None else \"empty\"\n    return f\"power:{str(self.getPower())}, time:{self.getTime()}, person:({self.getPerson() if self.getPerson() is not None else 'empty'})\"\n\nmoto = Motorcycle()\n\nwhile True:\n  command = input().split()\n  print(f\"${' '.join(command)}\")\n  \n  if command[0] == \"end\":\n    break\n  elif command[0] == \"show\":\n    print(moto)\n  elif command[0] == \"enter\":\n    name = command[1]\n    age = int(command[2])\n    person = Person(name, age)\n    moto.insertPerson(person)\n  elif command[0] == \"leave\":\n    removed = moto.remove()\n    if removed is not None:\n      print(removed)\n  elif command[0] == \"buy\":\n    time = int(command[1])\n    moto.buyTime(time)\n  elif command[0] == \"drive\":\n    time = int(command[1])\n    moto.drive(time)\n  elif command[0] == \"honk\":\n    moto.honk()\n  elif command[0] == \"init\":\n    power = int(command[1])\n    moto = Motorcycle(power)\n  else:\n    print(\"fail: invalid command\")\n    ",
            "lines": "129"
        }
    ]
}