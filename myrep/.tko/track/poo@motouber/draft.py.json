{
    "patches": [
        {
            "label": "2025-10-28_16-06-11",
            "content": "class Pessoa:\n  def __init__(self, nome: str, dinheiro: int):\n    self.__nome = nome\n    self.__dinheiro = dinheiro\n\n  def getNome(self):\n    return self.__nome\n\n  def getDinheiro(self):\n    return self.__dinheiro\n  \n  def setDinheiro(self, valor: int) -> bool:\n    self.__dinheiro = valor\n  \n  def __str__(self):\n    return f\"{self.getNome()}:{self.getDinheiro()}\"\n  \nclass Moto:\n  def __init__(self):\n    self.__passageiro: Pessoa | None = None\n    self.__motorista: Pessoa | None = None\n    self.__custoCorridaAtual: int = 0\n\n  def getMotorista(self) -> Pessoa | None:\n    return self.__motorista\n\n  def setMotorista(self, motorista: Pessoa):\n    self.__motorista = motorista\n\n  def getPassageiro(self) -> Pessoa | None:\n    return self.__passageiro\n  \n  def setPassageiro(self, passageiro: Pessoa):\n    if self.getMotorista() is None:\n      print(\"N\u00e3o \u00e9 poss\u00edvel adicionar passageiro sem motorista.\")\n      return\n  \n    self.__passageiro = passageiro\n\n  def getCustoCorridaAtual(self) -> float:\n    return self.__custoCorridaAtual\n\n  def setCustoCorridaAtual(self, custo: float):\n    self.__custoCorridaAtual = custo\n\n  def drive(self, cost: int):\n    if self.getMotorista() is None or self.getPassageiro() is None:\n      print(\"N\u00e3o \u00e9 poss\u00edvel dirigir sem motorista e passageiro.\")\n      return\n\n    self.setCustoCorridaAtual(\n      self.getCustoCorridaAtual() + cost\n    )\n\n  def removePassageiro(self):\n    if self.getPassageiro() is None:\n      print(\"N\u00e3o h\u00e1 passageiro para remover.\")\n      return None\n    \n    passageiro = self.getPassageiro()\n\n    if self.getCustoCorridaAtual() > self.getPassageiro().getDinheiro():\n      print(\"fail: Passenger does not have enough money\")\n      self.getMotorista().setDinheiro(\n        self.getMotorista().getDinheiro() +\n        self.getCustoCorridaAtual()\n      )\n      self.setCustoCorridaAtual(0)\n      self.getPassageiro().setDinheiro(0)\n      self.setPassageiro(None)\n      return passageiro\n\n    self.getPassageiro().setDinheiro(\n      self.getPassageiro().getDinheiro() -\n      self.getCustoCorridaAtual()\n    )\n\n    self.getMotorista().setDinheiro(\n      self.getMotorista().getDinheiro() +\n      self.getCustoCorridaAtual()\n    )\n\n    self.setPassageiro(None)\n    self.setCustoCorridaAtual(0)\n    return passageiro\n\n  def __str__(self):\n    return f\"Cost: {self.getCustoCorridaAtual()}, Driver: {self.getMotorista()}, Passenger: {self.getPassageiro()}\"\n\n\nmoto = Moto()\nmotorista = Pessoa(\"\", 0.0)\npassageiro = Pessoa(\"\", 0.0)\n\nwhile True:\n  comando = input()\n  print(\"$\" + comando)\n  args = comando.split()\n\n  if args[0] == \"end\":\n    break\n  elif args[0] == \"show\":\n    print(moto)\n  elif args[0] == \"setDriver\":\n    nome = args[1]\n    dinheiro = int(args[2])\n    motorista = Pessoa(nome, dinheiro)\n    moto.setMotorista(motorista)\n  elif args[0] == \"setPass\":\n    nome = args[1]\n    dinheiro = int(args[2])\n    passageiro = Pessoa(nome, dinheiro)\n    moto.setPassageiro(passageiro)\n  elif args[0] == \"drive\":\n    custo = int(args[1])\n    moto.drive(custo)\n  elif args[0] == \"leavePass\":\n    passageiro = moto.removePassageiro()\n    if passageiro is not None:\n      print(f\"{passageiro} left\")\n  else:\n    print(\"comando inv\u00e1lido\")",
            "lines": "122"
        }
    ]
}