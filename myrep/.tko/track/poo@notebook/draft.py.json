{
    "patches": [
        {
            "label": "2025-10-28_16-07-21",
            "content": "class Bateria:\n  def __init__(self, capacidade: int):\n    self.__carga: int = capacidade\n    self.__capacidade: int = capacidade\n\n  def setCarga(self, carga: int):\n    if 0 > carga:\n      print(\"erro: carga inv\u00e1lida\")\n      return\n    \n    if carga > self.__capacidade:\n      self.__carga = self.__capacidade\n      return\n\n    self.__carga = carga\n\n  def getCarga(self):\n    return self.__carga\n  \n  def mostrar(self):\n    print(self)\n  \n  def __str__(self):\n    return f\"({self.__carga}/{self.__capacidade})\"\n  \n\n\nclass Carregador:\n  def __init__(self, potencia: int):\n    self.__potencia: int = potencia\n\n  def getPotencia(self):\n    return self.__potencia\n  \n  def setPotencia(self, potencia: int):\n    self.__potencia = potencia\n\n  def mostrar(self):\n    print(self)\n\n  def __str__(self):\n    return f\"(Pot\u00eancia {self.__potencia})\"\n\n\n\nclass Notebook:\n  def __init__(self):\n    self.__ligado: bool = False\n    self.__bateria: Bateria | None = None\n    self.__carregador: Carregador | None = None\n\n  def setLigado(self, ligado: bool):\n    self.__ligado = ligado\n\n  def getLigado(self):\n    return self.__ligado\n  \n  def setBateria(self, bateria: Bateria):\n    self.__bateria = bateria\n\n  def getBateria(self):\n    return self.__bateria\n\n  def setCarregador(self, carregador: Carregador):\n    self.__carregador = carregador\n\n  def getCarregador(self):\n    return self.__carregador\n\n  def rmBateria(self):\n    bateria_removida = self.__bateria\n    self.__bateria = None\n    print(\"bateria removida\")\n    return bateria_removida\n  \n  def ligar(self):\n    if self.getBateria() == None and self.getCarregador() == None:\n      print(\"erro: n\u00e3o foi poss\u00edvel ligar\")\n      return\n\n    if self.getBateria() != None and self.getBateria().getCarga() == 0 and self.getCarregador() == None:\n      print(\"erro: bateria sem carga\")\n      return\n\n    self.setLigado(True)\n    print(\"Notebook ligado\")\n\n  def desligar(self):\n    self.setLigado(False)\n    print(\"Notebook desligado\")\n  \n  def usar(self, minutes: int):\n    if not self.getLigado():\n      print(\"erro: notebook desligado\")\n      return\n    \n    if self.getBateria().getCarga() < minutes and self.getCarregador() == None:\n      print(f\"Usando por {self.getBateria().getCarga()} minutos\")\n      self.getBateria().setCarga(0)\n      self.setLigado(False)\n      return\n    \n    if self.getCarregador() != None:\n      print(f\"Usando por {minutes} minutos\")\n      self.getBateria().setCarga(\n        self.getCarregador().getPotencia() * minutes + self.getBateria().getCarga()\n      )\n      return\n\n    print(f\"Usando por {minutes} minutos\")\n    self.getBateria().setCarga(self.getBateria().getCarga() - minutes)\n\n  def mostrar(self):\n    print(self)\n\n  def __str__(self):\n    return f\"Status: {\"Ligado\" if self.getLigado() else \"Desligado\"}, \" + \\\n           f\"Bateria: {\"Nenhuma\" if self.getBateria() == None else self.getBateria()}, \" + \\\n           f\"Carregador: {\"Desconectado\" if self.getCarregador() == None else self.getCarregador()}\"\n\nnotebook = Notebook() # criando notebook\nnotebook.mostrar()    # msg: Status: Desligado, Bateria: Nenhuma, Carregador: Desconectado\nnotebook.ligar()      # msg: n\u00e3o foi poss\u00edvel ligar\nnotebook.usar(10)     # msg: notebook desligado\n\nbateria = Bateria(50) # criando bateria que suporta 50 minutos e come\u00e7a carregada\nbateria.mostrar()     # (50/50)\nnotebook.setBateria(bateria) # coloca a bateria no notebook\n\nnotebook.mostrar() # msg: Status: Desligado, Bateria: (50/50), Carregador: Desconectado\nnotebook.ligar()   # msg: notebook ligado\nnotebook.mostrar() # msg: Status: Ligado, Bateria: (50/50), Carregador: Desconectado\nnotebook.usar(30)  # msb: Usando por 30 minutos\nnotebook.mostrar() # msg: Status: Ligado, Bateria: (20/50), Carregador: Desconectado\nnotebook.usar(30)  # msb: Usando por 20 minutos, notebook descarregou\nnotebook.mostrar() # msg: Status: Desligado, Bateria: (0/50), Carregador: Desconectado\n\nbateria = notebook.rmBateria() # msg: bateria removida\nbateria.mostrar()  # (0/50)\nnotebook.mostrar() # msg: Status: Desligado, Bateria: Nenhuma, Carregador: Desconectado\n\ncarregador = Carregador(2) # criando carregador com 2 de potencia\ncarregador.mostrar() # (Pot\u00eancia 2)\n\nnotebook.setCarregador(carregador) # adicionando carregador no notebook\nnotebook.mostrar() # msg: Status: Desligado, Bateria: Nenhuma, Carregador: (Pot\u00eancia 2)\nnotebook.ligar()   # msg: notebook ligado\nnotebook.mostrar() # msg: Status: Ligado, Bateria: Nenhuma, Carregador: (Pot\u00eancia 2)\n\nnotebook.setBateria(bateria)\nnotebook.mostrar() # msg: Status: Ligado, Bateria: (0/50), Carregador: (Pot\u00eancia 2)\nnotebook.usar(10)  # msg: Notebook utilizado com sucesso\nnotebook.mostrar() # msg: Status: Ligado, Bateria: (20/50), Carregador: (Pot\u00eancia 2)\n",
            "lines": "153"
        }
    ]
}