{
    "patches": [
        {
            "label": "2025-10-28_16-09-52",
            "content": "class Tamagochi:\n  def __init__(self, energyMax, cleanMax):\n    self.__energyMax = energyMax\n    self.__cleanMax = cleanMax\n    self.__energy = energyMax\n    self.__clean = cleanMax\n    self.__age = 0\n    self.__alive = True\n  \n  def setEnergy(self, energy):\n    if energy <= 0:\n      self.__energy = 0\n      self.__alive = False\n      return\n  \n    if energy > self.__energyMax:\n      self.__energy = self.__energyMax\n      return\n    \n    self.__energy = energy\n\n  def setClean(self, clean):\n    if clean <= 0:\n      self.__clean = 0\n      self.__alive = False\n      return\n  \n    if clean > self.__cleanMax:\n      self.__clean = self.__cleanMax\n      return\n    \n    self.__clean = clean\n\n  def setAge(self, age):\n    if age < 0:\n      self.__age = 0\n      return\n    \n    self.__age = age\n\n  def getEnergy(self):\n    return self.__energy\n  \n  def getEnergyMax(self):\n    return self.__energyMax\n\n  def getClean(self):\n    return self.__clean\n\n  def getCleanMax(self):\n    return self.__cleanMax\n\n  def getAge(self):\n    return self.__age\n\n  def isAlive(self):\n    return self.__alive\n  \n  def __str__(self):\n    return f\"E:{self.getEnergy()}/{self.getEnergyMax()}, L:{self.getClean()}/{self.getCleanMax()}, I:{self.getAge()}\"\n  \n\nclass Game:\n  def __init__(self, tamagochi):\n    self.__tamagochi = None\n    self.__turnos = 1\n    self.setPet(tamagochi)\n\n  def setPet(self, tamagochi):\n    self.__tamagochi = tamagochi\n    self.__turnos = 1\n\n  def testAlive(self) -> bool:\n    return self.getPet().isAlive()\n\n  def getPet(self):\n    return self.__tamagochi\n  \n  def show(self):\n    self.__turnos += 1\n    return str(self.getPet())\n\n  def play(self):\n    if not self.testAlive():\n      print(\"fail: pet esta morto\")\n      return\n\n    self.getPet().setEnergy(self.getPet().getEnergy() - 2)\n    self.getPet().setClean(self.getPet().getClean() - 3)\n    self.getPet().setAge(self.getPet().getAge() + 1)\n    self.__turnos += 1\n\n    if not self.testAlive():\n      if self.getPet().getEnergy() <= 0:\n        print(\"fail: pet morreu de fraqueza\")\n      elif self.getPet().getClean() <= 0:\n        print(\"fail: pet morreu de sujeira\")\n  \n  def sleep(self):\n    if not self.testAlive():\n      print(\"fail: pet esta morto\")\n      return\n    \n    minToSleep = 5\n    if self.getPet().getEnergyMax() - self.getPet().getEnergy() < minToSleep:\n      print(\"fail: nao esta com sono\")\n      return\n\n    self.getPet().setEnergy(self.getPet().getEnergyMax())\n    self.getPet().setAge(self.getPet().getAge() + self.__turnos)\n    self.__turnos += 1\n\n  def shower(self):\n    if not self.testAlive():\n      print(\"fail: pet esta morto\")\n      return \n\n    self.getPet().setEnergy(self.getPet().getEnergy() - 3)\n    self.getPet().setClean(self.getPet().getCleanMax())\n    self.getPet().setAge(self.getPet().getAge() + 2)\n    self.__turnos += 1\n  \npet = Tamagochi(0, 0)\ngame = Game(pet)\n\nwhile True:\n  command = input()\n  print(\"$\"+command)\n  args = command.split()\n\n  if args[0] == \"init\":\n    pet = Tamagochi(int(args[1]), int(args[2]))\n    game.setPet(pet)\n  elif args[0] == \"show\":\n    print(game.show())\n  elif args[0] == \"end\":\n    break\n  elif args[0] == \"play\":\n    game.play()\n  elif args[0] == \"sleep\":\n    game.sleep()\n  elif args[0] == \"shower\":\n    game.shower()\n  else:\n    print(\"Invalid command\")\n",
            "lines": "145"
        }
    ]
}