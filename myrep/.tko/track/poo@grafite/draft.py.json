{
    "patches": [
        {
            "label": "2025-10-28_16-04-35",
            "content": "class Lead:\n  def __init__(self, thickness: float, hardness: str, size: int):\n    self.__thickness = thickness\n    self.__hardness = hardness\n    self.__size = size\n\n  def usagePerSheet(self) -> float:\n    usage = {\n      \"HB\": 1,\n      \"2B\": 2,\n      \"4B\": 4,\n      \"6B\": 6\n    }\n    return usage.get(self.getHardness(), 0)\n    \n  def getThickness(self) -> float:\n    return self.__thickness\n\n  def getHardness(self) -> str:\n    return self.__hardness\n\n  def getSize(self) -> int:\n    return self.__size\n\n  def setSize(self, size: int):\n    self.__size = size\n\n  def __str__(self):\n    return f\"[{self.getThickness()}:{self.getHardness()}:{self.getSize()}]\"\n\n\nclass Pencil:\n  def __init__(self, thickness: str):\n    self.__thickness = thickness\n    self.__lead: Lead | None = None\n\n  def writePage(self) -> bool:\n    if not self.hasGraffite():\n      print(\"fail: nao existe grafite\")\n      return False\n    \n    grafite = self.__lead\n    usage = grafite.usagePerSheet()\n\n    if grafite.getSize() <= 10:\n      print(\"fail: tamanho insuficiente\")\n      grafite.setSize(10)\n      return False\n    \n    if grafite.getSize() - usage < 10:\n      print(\"fail: folha incompleta\")\n      grafite.setSize(10)\n      return False\n  \n    grafite.setSize(grafite.getSize() - usage)\n    return True\n\n  def hasGraffite(self) -> bool:\n    return self.__lead is not None\n  \n  def remove(self) -> Lead | None:\n    if not self.hasGraffite():\n      print(\"fail: nao existe grafite\")\n      return None\n    removed = self.__lead\n    self.__lead = None\n    return removed\n  \n  def insert(self, lead: Lead) -> bool:\n    if self.hasGraffite():\n      print(\"fail: ja existe grafite\")\n      return False\n    if lead.getThickness() != self.getThickness():\n      print(\"fail: calibre incompativel\")\n      return False\n    self.__lead = lead\n    return True\n\n  def getThickness(self) -> str:\n    return self.__thickness\n\n  def setThickness(self, thickness: str):\n    self.__thickness = thickness\n\n  def __str__(self):\n    return f\"calibre: {self.getThickness()}, grafite: {self.__lead if self.hasGraffite() else 'null'}\"\n  \npencil = Pencil(\"0.5\")\nlead = Lead(0.5, \"HB\", 50)\n\nwhile True:\n  command = input().split()\n  print(\"$\" + \" \".join(command))\n\n  if command[0] == \"end\":\n    break\n  elif command[0] == \"init\":\n    pencil = Pencil(float(command[1]))\n  elif command[0] == \"insert\":\n    lead = Lead(float(command[1]), command[2], int(command[3]))\n    pencil.insert(lead)\n  elif command[0] == \"show\":\n    print(pencil)\n  elif command[0] == \"remove\":\n    pencil.remove()\n  elif command[0] == \"write\":\n    pencil.writePage()\n  else:\n    print(\"fail: comando invalido\")",
            "lines": "109"
        }
    ]
}